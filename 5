# reminder.py
# Module for managing task reminders based on due dates
# Supports customizable reminder intervals

from datetime import datetime, timedelta
from typing import List
from task import Task, TaskManager

class Reminder:
    """Class for managing task reminders with customizable intervals."""
    def __init__(self, task_manager: TaskManager, reminder_days: int = 1):
        self.task_manager = task_manager
        self.reminder_days = reminder_days  # Number of days before due date to remind

    def set_reminder_days(self, days: int) -> None:
        """Set the number of days before due date for reminders."""
        if days > 0:
            self.reminder_days = days
            print(f"Reminder interval set to {days} days.")
        else:
            print("Reminder interval must be positive!")

    def check_reminders(self) -> List[Task]:
        """Check for tasks due within the reminder interval."""
        user = self.task_manager.user_manager.get_current_user()
        if not user:
            print("Please log in first!")
            return []
        reminders = []
        now = datetime.now()
        reminder_threshold = now + timedelta(days=self.reminder_days)
        for task in user.tasks:
            if not task.completed:
                try:
                    due_date = datetime.strptime(task.due_date, "%Y-%m-%d")
                    if now <= due_date <= reminder_threshold:
                        reminders.append(task)
                except ValueError:
                    print(f"Invalid due date format for task '{task.title}'!")
                    continue
        return reminders

    def display_reminders(self) -> None:
        """Display tasks that are due soon."""
        reminders = self.check_reminders()
        if not reminders:
            print("No upcoming reminders!")
            return
        print(f"\nUpcoming Reminders (within {self.reminder_days} days):")
        for task in reminders:
            print(f"Task '{task.title}' is due on {task.due_date}!")
