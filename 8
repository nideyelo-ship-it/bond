# history.py
# Module for tracking task history, including creation, updates, and completion
# Stores a log of all task-related actions

from datetime import datetime
from typing import List, Dict
from task import Task

class TaskHistoryEntry:
    """Class representing a single history entry for a task."""
    def __init__(self, task_id: str, action: str, details: str):
        self.task_id = task_id
        self.action = action  # e.g., 'created', 'updated', 'completed'
        self.details = details
        self.timestamp = datetime.now()

    def to_dict(self) -> Dict:
        """Convert history entry to dictionary for JSON serialization."""
        return {
            "task_id": self.task_id,
            "action": self.action,
            "details": self.details,
            "timestamp": self.timestamp.isoformat()
        }

class TaskHistory:
    """Class for managing task history across all tasks."""
    def __init__(self, history_file: str = "task_history.json"):
        self.history_file = history_file
        self.entries = []
        self.load_history()

    def load_history(self) -> None:
        """Load task history from JSON file."""
        if os.path.exists(self.history_file):
            try:
                with open(self.history_file, 'r') as f:
                    data = json.load(f)
                    for entry in data:
                        history_entry = TaskHistoryEntry(entry["task_id"], entry["action"], entry["details"])
                        history_entry.timestamp = datetime.fromisoformat(entry["timestamp"])
                        self.entries.append(history_entry)
            except Exception as e:
                print(f"Error loading task history: {e}")

    def save_history(self) -> None:
        """Save task history to JSON file."""
        try:
            data = [entry.to_dict() for entry in self.entries]
            with open(self.history_file, 'w') as f:
                json.dump(data, f, indent=4)
        except Exception as e:
            print(f"Error saving task history: {e}")

    def add_entry(self, task_id: str, action: str, details: str) -> None:
        """Add a new history entry for a task."""
        entry = TaskHistoryEntry(task_id, action, details)
        self.entries.append(entry)
        self.save_history()

    def get_task_history(self, task_id: str) -> List[TaskHistoryEntry]:
        """Retrieve all history entries for a specific task."""
        return [entry for entry in self.entries if entry.task_id == task_id]

    def display_task_history(self, task_id: str) -> None:
        """Display the history for a specific task."""
        history = self.get_task_history(task_id)
        if not history:
            print(f"No history found for task ID {task_id}!")
            return
        print(f"\nHistory for Task ID {task_id}:")
        for entry in history:
            print(f"[{entry.timestamp}] {entry.action}: {entry.details}")
