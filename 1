# user.py
# Module for managing user accounts, roles, and authentication

import json
import os
from typing import List, Dict
from getpass import getpass
import hashlib

class User:
    """Class representing a user with username, password, and role."""
    def __init__(self, username: str, password: str, role: str = "user"):
        self.username = username
        self.password = self._hash_password(password)
        self.role = role  # Admin or User
        self.tasks = []

    def _hash_password(self, password: str) -> str:
        """Hash the password using SHA-256 for security."""
        return hashlib.sha256(password.encode()).hexdigest()

    def check_password(self, password: str) -> bool:
        """Verify if the provided password matches the stored hash."""
        return self._hash_password(password) == self.password

    def to_dict(self) -> Dict:
        """Convert user object to dictionary for JSON serialization."""
        return {
            "username": self.username,
            "password": self.password,
            "role": self.role,
            "tasks": [task.to_dict() for task in self.tasks]
        }

    def add_task(self, task) -> None:
        """Add a task to the user's task list."""
        self.tasks.append(task)

class UserManager:
    """Class for managing user registration, login, and data persistence."""
    def __init__(self, data_file: str = "users.json"):
        self.data_file = data_file
        self.users = {}
        self.current_user = None
        self.load_users()

    def load_users(self) -> None:
        """Load user data from JSON file."""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r') as f:
                    data = json.load(f)
                    for user_data in data:
                        user = User(user_data["username"], "", user_data["role"])
                        user.password = user_data["password"]  # Directly set hashed password
                        self.users[user.username] = user
            except Exception as e:
                print(f"Error loading users: {e}")

    def save_users(self) -> None:
        """Save user data to JSON file."""
        try:
            data = [user.to_dict() for user in self.users.values()]
            with open(self.data_file, 'w') as f:
                json.dump(data, f, indent=4)
        except Exception as e:
            print(f"Error saving users: {e}")

    def register(self, username: str, password: str, role: str = "user") -> bool:
        """Register a new user with username, password, and role."""
        if username in self.users:
            print("Username already exists!")
            return False
        self.users[username] = User(username, password, role)
        self.save_users()
        print(f"User {username} registered successfully!")
        return True

    def login(self, username: str, password: str) -> bool:
        """Log in a user with username and password."""
        if username in self.users and self.users[username].check_password(password):
            self.current_user = self.users[username]
            print(f"Welcome, {username} ({self.current_user.role})!")
            return True
        print("Invalid username or password!")
        return False

    def get_current_user(self) -> User:
        """Return the currently logged-in user."""
        return self.current_user
